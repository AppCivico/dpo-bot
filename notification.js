/* eslint no-param-reassign: 0 */ // --> OFF
import 'dotenv/config';

import { CronJob } from 'cron';
import { fs } from 'fs';
import { jsonfile } from 'jsonfile';
import sendBroadcast from './src/utils/broadcast';
import { moment } from './src/utils/helper';

const sessionsFolder = './.sessions/';

const msgs = [
	{
		text: 'Fique ligado!\nO General Data Protection Regulation (Regulamento Geral de ProteÃ§Ã£o de Dados - GDPR) Ã© a norma da UniÃ£o Europeia sobre proteÃ§Ã£o de dados. O regulamento foi sancionado em 2016 e passou a valer em 2018, mudando a forma com que as empresas e demais instituiÃ§Ãµes do mundo inteiro lidam com o dados pessoais.\nA principal intenÃ§Ã£o do GDPR Ã© criar uma cultura de dados cidadÃ£ e consciente, que garanta a proteÃ§Ã£o da seguranÃ§a e da privacidade dos titulares e evite que as corporaÃ§Ãµes/organizaÃ§Ãµes utilizem essas informaÃ§Ãµes de maneira antiÃ©tica e assegura mais equilibrio nas relaÃ§Ãµes em que hÃ¡ o tratamento de dados pessoais.',
		buttons: [
			{ content_type: 'text', title: 'Voltar', payload: 'mainMenu' },
		],
	},
	{
		text: 'Sabia que vocÃª pode transferir seus dados para outra pessoa ou empresa mediante requisiÃ§Ã£o expressa? Caso queira enviÃ¡-los, clique no botÃ£o SolicitaÃ§Ãµes > Portabilidade de Dados ;)',
		buttons: [
			{ content_type: 'text', title: 'Voltar', payload: 'mainMenu' },
			{ content_type: 'text', title: 'SolicitaÃ§Ãµes', payload: 'solicitacoes' },
		],
	},
	{
		text: 'A LGPD foi sancionada em agosto de 2018, mas a sua vigÃªncia sÃ³ inicia em agosto de 2020.\nIsso significa que a partir de agosto de 2020 todas as empresas e entes pÃºblicos deverÃ£o estar em conformidade com todos requisitos da lei, assim como devem estar prontas para atender todas as solicitaÃ§Ãµes dos consumidores ðŸ‘‹ðŸ˜„',
		buttons: [
			{ content_type: 'text', title: 'Voltar', payload: 'mainMenu' },
		],
	},
	{
		text: `Realizamos a coleta de dados pessoais mediante a sua autorizaÃ§Ã£o ou de seus responsÃ¡veis. :) A coleta Ã© realizada quando vocÃª utiliza os nossos serviÃ§os, por meio de formulÃ¡rios, cookies ou quando Ã© efetuada a transferÃªncia para nÃ³s.
Em determinados casos serÃ¡ necessÃ¡rio a autorizaÃ§Ã£o dos responsÃ¡veis de modo expresso.
Caso vocÃª queira mais informaÃ§Ãµes, clique em SolicitaÃ§Ãµes > Fale conosco.`,
		buttons: [
			{ content_type: 'text', title: 'Voltar', payload: 'mainMenu' },
			{ content_type: 'text', title: 'SolicitaÃ§Ãµes', payload: 'solicitacoes' },
		],
	},
];

async function sendNotificacao(file, fileName, text, buttons) {
	const error = await sendBroadcast(file.user.id, text, { quick_replies: buttons });
	if (!error) {
		console.log(`Broadcast enviado para ${file.user.id} - ${file.user.name}`);
		file._state.notificacao.sent += 1;
		file._state.notificacao.date = new Date();
		jsonfile.writeFile(sessionsFolder + fileName, file)
			.then(() => console.log(`Novo estado de ${file.user.id} escrito com sucesso!`))
			.catch((err) => console.log(`NÃ£o foi possÃ­vel salvar o estado de ${file.user.id} - ${file.user.name} depois do broadcast`, err));
	} else {
		console.log(`Erro ao enviar o broadcast para ${file.user.id}:`, error);
	}
}

async function checkTimeDifference(date) {
	const dateM = moment(date);

	const now = moment(new Date());
	const diff = now.diff(dateM, 'minutes');

	if (diff >= 5) return true;
	return false;
}

async function checkNotificacao() {
	const listNames = fs.readdirSync(sessionsFolder); // get all file names
	for (let i = 0; i < listNames.length; i++) {
		const fileName = listNames[i]; // get current filename
		const file = jsonfile.readFileSync(sessionsFolder + fileName); // load file as a json
		if (file._state.wantNotification) {
			if (!file._state.notificacao) { file._state.notificacao = { sent: 0, date: null }; }
			const opt = msgs[file._state.notificacao.sent];
			if (opt) {
				const checkTime = await checkTimeDifference(file._state.notificacao.date);

				if (!file._state.notificacao.date || checkTime) {
					await sendNotificacao(file, fileName, opt.text, opt.buttons);
				}
			}
		}
	}
}


const notificacaoCron = new CronJob(
	'00 0-59/5 * * * *', async () => {
		console.log('Running notificacao');
		try {
			await checkNotificacao();
		} catch (error) {
			console.log('notificacao error', error);
		}
	}, (() => { console.log('Crontab notificacao stopped.'); }),
	false, 'America/Sao_Paulo', false, false,
);

// if (process.env.REACT_APP_ENV !== 'PROD') notificacaoCron.start();

export default notificacaoCron;
